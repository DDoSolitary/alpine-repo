diff --git a/src/api/api.c b/src/api/api.c
index a6bf4e0..151a3f7 100644
--- a/src/api/api.c
+++ b/src/api/api.c
@@ -166,8 +166,8 @@ void getOverTime(const int *sock)
 	{
 		for(int slot = from; slot < until; slot++)
 		{
-			ssend(*sock,"%li %i %i\n",
-			      overTime[slot].timestamp,
+			ssend(*sock,"%lli %i %i\n",
+			      (long long int)overTime[slot].timestamp,
 			      overTime[slot].total,
 			      overTime[slot].blocked);
 		}
@@ -907,8 +907,8 @@ void getAllQueries(const char *client_message, const int *sock)
 
 		if(istelnet[*sock])
 		{
-			ssend(*sock,"%li %s %s %s %i %i %i %lu %s %i",
-				query->timestamp,
+			ssend(*sock,"%lli %s %s %s %i %i %i %lu %s %i",
+				(long long int)query->timestamp,
 				qtype,
 				domain,
 				clientIPName,
@@ -1042,7 +1042,7 @@ void getQueryTypesOverTime(const int *sock)
 		}
 
 		if(istelnet[*sock])
-			ssend(*sock, "%li %.2f %.2f\n", overTime[slot].timestamp, percentageIPv4, percentageIPv6);
+			ssend(*sock, "%lli %.2f %.2f\n", (long long int)overTime[slot].timestamp, percentageIPv4, percentageIPv6);
 		else {
 			pack_int32(*sock, overTime[slot].timestamp);
 			pack_float(*sock, percentageIPv4);
@@ -1183,7 +1183,7 @@ void getClientsOverTime(const int *sock)
 	for(int slot = sendit; slot < until; slot++)
 	{
 		if(istelnet[*sock])
-			ssend(*sock, "%li", overTime[slot].timestamp);
+			ssend(*sock, "%lli", (long long int)overTime[slot].timestamp);
 		else
 			pack_int32(*sock, overTime[slot].timestamp);
 
@@ -1311,7 +1311,7 @@ void getUnknownQueries(const int *sock)
 		const char *clientIP = getstr(client->ippos);
 
 		if(istelnet[*sock])
-			ssend(*sock, "%li %i %i %s %s %s %i %s\n", query->timestamp, queryID, query->id, type, getstr(domain->domainpos), clientIP, query->status, query->complete ? "true" : "false");
+			ssend(*sock, "%lli %i %i %s %s %s %i %s\n", (long long int)query->timestamp, queryID, query->id, type, getstr(domain->domainpos), clientIP, query->status, query->complete ? "true" : "false");
 		else {
 			pack_int32(*sock, query->timestamp);
 			pack_int32(*sock, query->id);
diff --git a/src/database/query-table.c b/src/database/query-table.c
index f3155dd..f83a000 100644
--- a/src/database/query-table.c
+++ b/src/database/query-table.c
@@ -331,7 +331,7 @@ void DB_read_queries(void)
 	const char *querystr = "SELECT * FROM queries WHERE timestamp >= ?";
 	// Log FTL_db query string in debug mode
 	if(config.debug & DEBUG_DATABASE)
-		logg("DB_read_queries(): \"%s\" with ? = %li", querystr, mintime);
+		logg("DB_read_queries(): \"%s\" with ? = %lli", querystr, (long long int)mintime);
 
 	// Prepare SQLite3 statement
 	sqlite3_stmt* stmt = NULL;
@@ -358,12 +358,12 @@ void DB_read_queries(void)
 		// 1483228800 = 01/01/2017 @ 12:00am (UTC)
 		if(queryTimeStamp < 1483228800)
 		{
-			logg("FTL_db warn: TIMESTAMP should be larger than 01/01/2017 but is %li", queryTimeStamp);
+			logg("FTL_db warn: TIMESTAMP should be larger than 01/01/2017 but is %lli", (long long int)queryTimeStamp);
 			continue;
 		}
 		if(queryTimeStamp > now)
 		{
-			if(config.debug & DEBUG_DATABASE) logg("FTL_db warn: Skipping query logged in the future (%li)", queryTimeStamp);
+			if(config.debug & DEBUG_DATABASE) logg("FTL_db warn: Skipping query logged in the future (%lli)", (long long int)queryTimeStamp);
 			continue;
 		}
 
@@ -390,14 +390,14 @@ void DB_read_queries(void)
 		const char * domainname = (const char *)sqlite3_column_text(stmt, 4);
 		if(domainname == NULL)
 		{
-			logg("FTL_db warn: DOMAIN should never be NULL, %li", queryTimeStamp);
+			logg("FTL_db warn: DOMAIN should never be NULL, %lli", (long long int)queryTimeStamp);
 			continue;
 		}
 
 		const char * clientIP = (const char *)sqlite3_column_text(stmt, 5);
 		if(clientIP == NULL)
 		{
-			logg("FTL_db warn: CLIENT should never be NULL, %li", queryTimeStamp);
+			logg("FTL_db warn: CLIENT should never be NULL, %lli", (long long int)queryTimeStamp);
 			continue;
 		}
 
@@ -416,7 +416,7 @@ void DB_read_queries(void)
 		{
 			if(upstream == NULL)
 			{
-				logg("WARN (during database import): FORWARD should not be NULL with status QUERY_FORWARDED (timestamp: %li), skipping entry", queryTimeStamp);
+				logg("WARN (during database import): FORWARD should not be NULL with status QUERY_FORWARDED (timestamp: %lli), skipping entry", (long long int)queryTimeStamp);
 				continue;
 			}
 			upstreamID = findUpstreamID(upstream, true);
@@ -537,7 +537,7 @@ void DB_read_queries(void)
 
 			default:
 				logg("Error: Found unknown status %i in long term database!", status);
-				logg("       Timestamp: %li", queryTimeStamp);
+				logg("       Timestamp: %lli", (long long int)queryTimeStamp);
 				logg("       Continuing anyway...");
 				break;
 		}
diff --git a/src/gc.c b/src/gc.c
index 59b4c45..24e9c31 100644
--- a/src/gc.c
+++ b/src/gc.c
@@ -59,7 +59,7 @@ void *GC_thread(void *val)
 				timer_start(GC_TIMER);
 				char timestring[84] = "";
 				get_timestr(timestring, mintime);
-				logg("GC starting, mintime: %s (%lu)", timestring, mintime);
+				logg("GC starting, mintime: %s (%lli)", timestring, (long long int)mintime);
 			}
 
 			// Process all queries
diff --git a/src/overTime.c b/src/overTime.c
index 191d1d2..dc8de33 100644
--- a/src/overTime.c
+++ b/src/overTime.c
@@ -31,7 +31,7 @@ static void initSlot(const unsigned int index, const time_t timestamp)
 	// Possible debug printing
 	if(config.debug & DEBUG_OVERTIME)
 	{
-		logg("initSlot(%u, %lu): Zeroing overTime slot", index, timestamp);
+		logg("initSlot(%u, %lli): Zeroing overTime slot", index, (long long int)timestamp);
 	}
 
 	// Initialize overTime entry
@@ -71,7 +71,7 @@ void initOverTime(void)
 	time_t timestamp = now - now % 3600 + 3600 - (OVERTIME_INTERVAL / 2);
 
 	if(config.debug & DEBUG_OVERTIME)
-		logg("initOverTime(): Initializing %i slots from %lu to %lu", OVERTIME_SLOTS, timestamp-OVERTIME_SLOTS*OVERTIME_INTERVAL, timestamp);
+		logg("initOverTime(): Initializing %i slots from %lli to %lli", OVERTIME_SLOTS, (long long int)timestamp-OVERTIME_SLOTS*OVERTIME_INTERVAL, (long long int)timestamp);
 
 	// Iterate over overTime
 	for(int i = OVERTIME_SLOTS-1; i >= 0 ; i--)
@@ -98,13 +98,13 @@ unsigned int getOverTimeID(time_t timestamp)
 	// Check bounds manually
 	if(id < 0)
 	{
-		logg("WARN: getOverTimeID(%lu): %u is negative: %lu", timestamp, id, firstTimestamp);
+		logg("WARN: getOverTimeID(%lli): %u is negative: %lli", (long long int)timestamp, id, (long long int)firstTimestamp);
 		// Return first timestamp in case negative timestamp was determined
 		return 0;
 	}
 	else if(id > OVERTIME_SLOTS-1)
 	{
-		logg("WARN: getOverTimeID(%lu): %i is too large: %lu", timestamp, id, firstTimestamp);
+		logg("WARN: getOverTimeID(%lli): %i is too large: %lli", (long long int)timestamp, id, (long long int)firstTimestamp);
 		// Return last timestamp in case a too large timestamp was determined
 		return OVERTIME_SLOTS-1;
 	}
@@ -112,7 +112,7 @@ unsigned int getOverTimeID(time_t timestamp)
 	if(config.debug & DEBUG_OVERTIME)
 	{
 		// Debug output
-		logg("getOverTimeID(%lu): %i", timestamp, id);
+		logg("getOverTimeID(%lli): %i", (long long int)timestamp, id);
 	}
 
 	return (unsigned int) id;
@@ -138,8 +138,8 @@ void moveOverTimeMemory(const time_t mintime)
 
 	if(config.debug & DEBUG_OVERTIME)
 	{
-		logg("moveOverTimeMemory(): IS: %lu, SHOULD: %lu, MOVING: %u",
-		     oldestOverTimeIS, oldestOverTimeSHOULD, moveOverTime);
+		logg("moveOverTimeMemory(): IS: %lli, SHOULD: %lli, MOVING: %u",
+		     (long long int)oldestOverTimeIS, (long long int)oldestOverTimeSHOULD, moveOverTime);
 	}
 
 	// Check if the move over amount is valid. This prevents errors if the
diff --git a/src/signals.c b/src/signals.c
index b98718e..34a0307 100644
--- a/src/signals.c
+++ b/src/signals.c
@@ -90,7 +90,7 @@ static void __attribute__((noreturn)) SIGSEGV_handler(int sig, siginfo_t *si, vo
 
 	if(FTLstarttime != 0)
 	{
-		logg("FTL has been running for %li seconds", time(NULL)-FTLstarttime);
+		logg("FTL has been running for %lli seconds", (long long int)(time(NULL)-FTLstarttime));
 	}
 	log_FTL_version(true);
 	char namebuf[16];
@@ -247,4 +247,4 @@ void handle_realtime_signals(void)
 pid_t main_pid(void)
 {
 	return mpid;
-}
\ No newline at end of file
+}
