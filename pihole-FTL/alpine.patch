diff --git a/Makefile b/Makefile
index 009e18f..9e77960 100644
--- a/Makefile
+++ b/Makefile
@@ -37,12 +37,13 @@ GCCVERSION8 := $(shell expr `$(CC) -dumpversion | cut -f1 -d.` \>= 8)
 # -pie -fPIE: For ASLR (address space layout randomization)
 # -g3: More debugging information
 # -fno-omit-frame-pointer: get nicer stacktraces
+# -funwind-tables: Generate static data for unwinding
 # -fasynchronous-unwind-tables: Increased reliability of backtraces
 # -fexceptions: Enable table-based thread cancellation
 # -Wl,-z,defs: Detect and reject underlinking (phenomenon caused by missing shared library arguments when invoking the linked editor to produce another shared library)
 # -Wl,-z,now: Disable lazy binding
 # -Wl,-z,relro: Read-only segments after relocation
-HARDENING_FLAGS=-fstack-protector-strong -Wp,-D_FORTIFY_SOURCE=2 -O3 -Wl,-z,relro,-z,now -pie -fPIE -fexceptions -fasynchronous-unwind-tables -Wl,-z,defs -Wl,-z,now -Wl,-z,relro
+HARDENING_FLAGS=-fstack-protector-strong -Wp,-D_FORTIFY_SOURCE=2 -O3 -Wl,-z,relro,-z,now -pie -fPIE -fexceptions -funwind-tables -fasynchronous-unwind-tables -Wl,-z,defs -Wl,-z,now -Wl,-z,relro
 DEBUG_FLAGS=-rdynamic -fno-omit-frame-pointer
 
 # -DSQLITE_OMIT_LOAD_EXTENSION: This option omits the entire extension loading mechanism from SQLite, including sqlite3_enable_load_extension() and sqlite3_load_extension() interfaces. (needs -ldl linking option, otherwise)
diff --git a/dnsmasq/dnsmasq.h b/dnsmasq/dnsmasq.h
index 4eb6455..62b3892 100644
--- a/dnsmasq/dnsmasq.h
+++ b/dnsmasq/dnsmasq.h
@@ -95,7 +95,7 @@ typedef unsigned long long u64;
 #if defined(HAVE_SOLARIS_NETWORK)
 #  include <sys/sockio.h>
 #endif
-#include <sys/poll.h>
+#include <poll.h>
 #include <sys/wait.h>
 #include <sys/time.h>
 #include <sys/un.h>
diff --git a/signals.c b/signals.c
index a0e3952..4ea49d3 100644
--- a/signals.c
+++ b/signals.c
@@ -9,12 +9,14 @@
 *  Please see LICENSE file for your rights under this license. */
 
 #include "FTL.h"
+#if defined(__GLIBC__)
 #include <execinfo.h>
+#endif
 
 volatile sig_atomic_t killed = 0;
-time_t FTLstarttime = 0;
+static time_t FTLstarttime = 0;
 
-static void SIGSEGV_handler(int sig, siginfo_t *si, void *unused)
+static void __attribute__((noreturn)) SIGSEGV_handler(int sig, siginfo_t *si, void *unused)
 {
 	logg("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
 	logg("---------------------------->  FTL crashed!  <----------------------------");
@@ -29,7 +31,7 @@ static void SIGSEGV_handler(int sig, siginfo_t *si, void *unused)
 	log_FTL_version(true);
 
 	logg("Received signal: %s", strsignal(sig));
-	logg("     at address: %lu", (unsigned long) si->si_addr);
+	logg("     at address: %p", si->si_addr);
 	switch (si->si_code)
 	{
 		case SEGV_MAPERR: logg("     with code: SEGV_MAPERR (Address not mapped to object)"); break;
@@ -37,28 +39,30 @@ static void SIGSEGV_handler(int sig, siginfo_t *si, void *unused)
 #if defined(SEGV_BNDERR)
 		case SEGV_BNDERR: logg("     with code: SEGV_BNDERR (Failed address bound checks)"); break;
 #endif
-		default: logg("     with code: Unknown (%i), ",si->si_code); break;
+		default: logg("     with code: Unknown (%i)", si->si_code); break;
 	}
 
+// Check GLIBC availability as MUSL does not support live backtrace generation
+#if defined(__GLIBC__)
 	// Try to obtain backtrace. This may not always be helpful, but it is better than nothing
 	void *buffer[255];
 	const int calls = backtrace(buffer, sizeof(buffer)/sizeof(void *));
+	logg("Backtrace:");
+
 	char ** bcktrace = backtrace_symbols(buffer, calls);
 	if(bcktrace == NULL)
+		logg("Unable to obtain backtrace symbols!");
+
+	for(int j = 0; j < calls; j++)
 	{
-		logg("Unable to obtain backtrace (%i)!",calls);
-	}
-	else
-	{
-		logg("Backtrace:");
-		int j;
-		for (j = 0; j < calls; j++)
-		{
-			logg("B[%04i]: %s",j,bcktrace[j]);
-		}
+		logg("B[%04i]: %p, %s", j, buffer[j],
+		     bcktrace != NULL ? bcktrace[j] : "---");
 	}
-	free(bcktrace);
-
+	if(bcktrace != NULL)
+		free(bcktrace);
+#else
+	logg("!!! INFO: pihole-FTL has not been compiled for glibc !!!");
+#endif
 	logg("Thank you for helping us to improve our FTL engine!");
 
 	// Print message and abort
