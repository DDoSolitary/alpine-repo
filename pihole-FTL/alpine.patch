diff --git a/Makefile b/Makefile
index c161029..9c9d579 100644
--- a/Makefile
+++ b/Makefile
@@ -33,12 +33,13 @@ GIT_TAG := $(shell git describe --tags --abbrev=0)
 # -pie -fPIE: For ASLR (address space layout randomization)
 # -g3: More debugging information
 # -fno-omit-frame-pointer: get nicer stacktraces
+# -funwind-tables: Generate static data for unwinding
 # -fasynchronous-unwind-tables: Increased reliability of backtraces
 # -fexceptions: Enable table-based thread cancellation
 # -Wl,-z,defs: Detect and reject underlinking (phenomenon caused by missing shared library arguments when invoking the linked editor to produce another shared library)
 # -Wl,-z,now: Disable lazy binding
 # -Wl,-z,relro: Read-only segments after relocation
-HARDENING_FLAGS=-fstack-protector -D_FORTIFY_SOURCE=2 -O3 -Wl,-z,relro,-z,now -pie -fPIE -fexceptions -fasynchronous-unwind-tables -Wl,-z,defs -Wl,-z,now -Wl,-z,relro
+HARDENING_FLAGS=-fstack-protector -D_FORTIFY_SOURCE=2 -O3 -Wl,-z,relro,-z,now -pie -fPIE -fexceptions -funwind-tables -fasynchronous-unwind-tables -Wl,-z,defs -Wl,-z,now -Wl,-z,relro
 DEBUG_FLAGS=-rdynamic -fno-omit-frame-pointer
 # -DSQLITE_OMIT_LOAD_EXTENSION: This option omits the entire extension loading mechanism from SQLite, including sqlite3_enable_load_extension() and sqlite3_load_extension() interfaces. (needs -ldl linking option, otherwise)
 # -DSQLITE_DEFAULT_MEMSTATUS=0: This setting causes the sqlite3_status() interfaces that track memory usage to be disabled. This helps the sqlite3_malloc() routines run much faster, and since SQLite uses sqlite3_malloc() internally, this helps to make the entire library faster.
@@ -59,7 +60,7 @@ WARNFLAGS=-Wall -Wextra -Wno-unused-parameter
 # -Wformat-nonliteral: If -Wformat is specified, also warn if the format string is not a string literal and so cannot be checked, unless the format function takes its format arguments as a va_list.
 # -Wuninitialized: Warn if an automatic variable is used without first being initialized
 # -Wswitch-enum: Warn whenever a switch statement has an index of enumerated type and lacks a case for one or more of the named codes of that enumeration.
-EXTRAWARN=-Werror -Waddress -Wlogical-op -Wmissing-field-initializers -Woverlength-strings -Wformat -Wformat-nonliteral -Wuninitialized -Wswitch-enum
+EXTRAWARN=-Werror -Wno-error=cpp -Waddress -Wlogical-op -Wmissing-field-initializers -Woverlength-strings -Wformat -Wformat-nonliteral -Wuninitialized -Wswitch-enum
 # -FILE_OFFSET_BITS=64: used by stat(). Avoids problems with files > 2 GB on 32bit machines
 CCFLAGS=-std=gnu11 -I$(IDIR) $(WARNFLAGS) -D_FILE_OFFSET_BITS=64 $(HARDENING_FLAGS) $(DEBUG_FLAGS) $(CFLAGS) $(SQLITEFLAGS)
 # for FTL we need the pthread library
@@ -123,4 +124,4 @@ prefix=/usr
 # the service script on sudo service pihole-FTL (re)start
 install: pihole-FTL
 	install -m 0755 pihole-FTL $(prefix)/bin
-	/sbin/setcap CAP_NET_BIND_SERVICE,CAP_NET_RAW,CAP_NET_ADMIN+eip $(prefix)/bin/pihole-FTL
+	setcap CAP_NET_BIND_SERVICE,CAP_NET_RAW,CAP_NET_ADMIN+eip $(prefix)/bin/pihole-FTL
diff --git a/signals.c b/signals.c
index 9855c7a..dcec9bd 100644
--- a/signals.c
+++ b/signals.c
@@ -9,12 +9,14 @@
 *  Please see LICENSE file for your rights under this license. */
 
 #include "FTL.h"
+#if defined(__GLIBC__)
 #include <execinfo.h>
+#endif
 
 volatile sig_atomic_t killed = 0;
-time_t FTLstarttime = 0;
+static time_t FTLstarttime = 0;
 
-static void SIGSEGV_handler(int sig, siginfo_t *si, void *unused)
+static void __attribute__((noreturn)) SIGSEGV_handler(int sig, siginfo_t *si, void *unused)
 {
 	logg("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
 	logg("---------------------------->  FTL crashed!  <----------------------------");
@@ -29,7 +31,7 @@ static void SIGSEGV_handler(int sig, siginfo_t *si, void *unused)
 	log_FTL_version(true);
 
 	logg("Received signal: %s", strsignal(sig));
-	logg("     at address: %lu", (unsigned long) si->si_addr);
+	logg("     at address: %p", si->si_addr);
 	switch (si->si_code)
 	{
 		case SEGV_MAPERR: logg("     with code: SEGV_MAPERR (Address not mapped to object)"); break;
@@ -37,28 +39,35 @@ static void SIGSEGV_handler(int sig, siginfo_t *si, void *unused)
 #if defined(SEGV_BNDERR)
 		case SEGV_BNDERR: logg("     with code: SEGV_BNDERR (Failed address bound checks)"); break;
 #endif
-		default: logg("     with code: Unknown (%i), ",si->si_code); break;
+		default: logg("     with code: Unknown (%i)", si->si_code); break;
 	}
 
+// Check GLIBC availability as MUSL does not support live backtrace generation
+#if defined(__GLIBC__)
 	// Try to obtain backtrace. This may not always be helpful, but it is better than nothing
 	void *buffer[255];
 	const int calls = backtrace(buffer, sizeof(buffer)/sizeof(void *));
+	logg("Backtrace:");
 	char ** bcktrace = backtrace_symbols(buffer, calls);
 	if(bcktrace == NULL)
 	{
-		logg("Unable to obtain backtrace (%i)!",calls);
+		logg("Unable to obtain backtrace symbols!");
+		for(int j = 0; j < calls; j++)
+		{
+			logg("B[%04i]: %p", j, buffer[j]);
+		}
 	}
 	else
 	{
-		logg("Backtrace:");
-		int j;
-		for (j = 0; j < calls; j++)
+		for(int j = 0; j < calls; j++)
 		{
-			logg("B[%04i]: %s",j,bcktrace[j]);
+			logg("B[%04i]: %s", j, bcktrace[j]);
 		}
 	}
 	free(bcktrace);
-
+#else
+	logg("!!! INFO: pihole-FTL has not been compiled for glibc !!!");
+#endif
 	logg("Thank you for helping us to improve our FTL engine!");
 
 	// Print message and abort
